<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xixfeng</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xixfeng.github.io/"/>
  <updated>2019-12-02T10:27:54.700Z</updated>
  <id>https://xixfeng.github.io/</id>
  
  <author>
    <name>Li Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机网络-考试资料</title>
    <link href="https://xixfeng.github.io/2019/12/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%80%83%E8%AF%95%E8%B5%84%E6%96%99/"/>
    <id>https://xixfeng.github.io/2019/12/02/计算机网络-考试资料/</id>
    <published>2019-12-02T10:22:47.000Z</published>
    <updated>2019-12-02T10:27:54.700Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1sYaAdyMFX-yraKsCTXbYcQ&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="计算机网络" scheme="https://xixfeng.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>编译原理(二)-语法分析</title>
    <link href="https://xixfeng.github.io/2019/11/27/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86(%E4%BA%8C)-%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/"/>
    <id>https://xixfeng.github.io/2019/11/27/编译原理(二)-语法分析/</id>
    <published>2019-11-27T00:31:01.000Z</published>
    <updated>2019-12-04T01:23:06.393Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Syntax-analyzer&quot;&gt;&lt;a href=&quot;#Syntax-analyzer&quot; class=&quot;headerlink&quot; title=&quot;Syntax analyzer&quot;&gt;&lt;/a&gt;Syntax analyzer&lt;/h1&gt;&lt;p&gt;三种生成方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Universal 通用的&lt;/li&gt;
&lt;li&gt;Top-Down 自顶向下&lt;/li&gt;
&lt;li&gt;Donw-Top 自底向上&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;程序的错误类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;词法错误    &lt;/li&gt;
&lt;li&gt;语法错误&lt;/li&gt;
&lt;li&gt;语义错误&lt;/li&gt;
&lt;li&gt;逻辑错误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;错误恢复方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;恐慌模式恢复：发现错误后，丢弃后面的输入符号，直到找到同步词法单元（界符；{} ()）&lt;/li&gt;
&lt;li&gt;短语层次：在错误后进行局部性纠正，将某个前缀改为可能正确的字符&lt;/li&gt;
&lt;li&gt;错误产生式：给出一些错误模版，如果与错误模版相同，就直接修改&lt;/li&gt;
&lt;li&gt;全局纠正&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="编译原理" scheme="https://xixfeng.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络(四)-网络层</title>
    <link href="https://xixfeng.github.io/2019/11/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C(%E5%9B%9B)-%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    <id>https://xixfeng.github.io/2019/11/26/计算机网络(四)-网络层/</id>
    <published>2019-11-26T12:56:54.000Z</published>
    <updated>2019-12-04T01:27:30.506Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Network-Layer&quot;&gt;&lt;a href=&quot;#1-Network-Layer&quot; class=&quot;headerlink&quot; title=&quot;1. Network Layer&quot;&gt;&lt;/a&gt;1. Network Layer&lt;/h1&gt;&lt;p&gt;传输层：程序之间的数据传输&lt;/p&gt;
&lt;p&gt;网络层：主机之间的数据传输&lt;/p&gt;
&lt;p&gt;forward：在一个路由器中选择出路&lt;/p&gt;
&lt;p&gt;routing：在很多路由器中选择一条路&lt;/p&gt;
&lt;h2 id=&quot;1-1-虚电路网络、数据报网络&quot;&gt;&lt;a href=&quot;#1-1-虚电路网络、数据报网络&quot; class=&quot;headerlink&quot; title=&quot;1.1 虚电路网络、数据报网络&quot;&gt;&lt;/a&gt;1.1 虚电路网络、数据报网络&lt;/h2&gt;&lt;p&gt;虚电路：提供面向连接的服务&lt;/p&gt;
&lt;p&gt;数据报：提供非面向连接的服务&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="计算机网络" scheme="https://xixfeng.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络(三)-传输层</title>
    <link href="https://xixfeng.github.io/2019/11/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C(%E4%B8%89)-%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
    <id>https://xixfeng.github.io/2019/11/26/计算机网络(三)-传输层/</id>
    <published>2019-11-26T12:56:16.000Z</published>
    <updated>2019-12-04T01:27:24.430Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Transport-Layer&quot;&gt;&lt;a href=&quot;#1-Transport-Layer&quot; class=&quot;headerlink&quot; title=&quot;1. Transport Layer&quot;&gt;&lt;/a&gt;1. Transport Layer&lt;/h1&gt;&lt;p&gt;网络层负责不同主机之间数据的传输，IP&lt;/p&gt;
&lt;p&gt;传输层负责不同程序之间数据的传输，Port&lt;/p&gt;
&lt;h2 id=&quot;1-1-Multiplexing-and-demultiplexing&quot;&gt;&lt;a href=&quot;#1-1-Multiplexing-and-demultiplexing&quot; class=&quot;headerlink&quot; title=&quot;1.1 Multiplexing and demultiplexing&quot;&gt;&lt;/a&gt;1.1 Multiplexing and demultiplexing&lt;/h2&gt;&lt;p&gt;多路复用和多路分解，感觉是只在TCP中使用？NO，UDP也会使用&lt;/p&gt;
&lt;p&gt;多路分解（demultiplexing）：将运输层报文段中的数据交付到正确的套接字&lt;/p&gt;
&lt;p&gt;多路复用 （multiplexing）：在源主机从不同的套接字中收集数据块，并为每个数据块封装上首部信息从而生成报文段&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="计算机网络" scheme="https://xixfeng.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络(二)-应用层</title>
    <link href="https://xixfeng.github.io/2019/11/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C(%E4%BA%8C)-%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    <id>https://xixfeng.github.io/2019/11/26/计算机网络(二)-应用层/</id>
    <published>2019-11-26T12:55:32.000Z</published>
    <updated>2019-12-04T01:26:54.917Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Application-Layer&quot;&gt;&lt;a href=&quot;#1-Application-Layer&quot; class=&quot;headerlink&quot; title=&quot;1. Application Layer&quot;&gt;&lt;/a&gt;1. Application Layer&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;client-server &lt;/p&gt;
&lt;p&gt;server farms：cluster，cloud，SPN，LoadBalance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;peer-to-peer (P2P) &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hybrid of client-server and P2P&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进程间通信：&lt;/p&gt;
&lt;p&gt;标示符 identifier：端口 port number，供操作系统来标示一个进程。（IP+port）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;为什么不使用PID作为identifier？因为一个主机中程序的PID每次启动都不相同
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="计算机网络" scheme="https://xixfeng.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络(一)-介绍</title>
    <link href="https://xixfeng.github.io/2019/11/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C(%E4%B8%80)-%E4%BB%8B%E7%BB%8D/"/>
    <id>https://xixfeng.github.io/2019/11/26/计算机网络(一)-介绍/</id>
    <published>2019-11-26T12:54:38.000Z</published>
    <updated>2019-12-04T01:28:00.471Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1.介绍&quot;&gt;&lt;/a&gt;1.介绍&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://wps.pearsoned.com/ecs_kurose_compnetw_6/216/55463/14198700.cw/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自顶向下教程配套的web动画&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-1-网络&quot;&gt;&lt;a href=&quot;#1-1-网络&quot; class=&quot;headerlink&quot; title=&quot;1.1 网络&quot;&gt;&lt;/a&gt;1.1 网络&lt;/h2&gt;&lt;p&gt;端系统通过&lt;strong&gt;通信链路（communication link）&lt;/strong&gt;和&lt;strong&gt;分组交换机（packet switch）&lt;/strong&gt;连接到一起。发送端系统将数据分段，并加上头部字节，由此形成的 信息包叫做&lt;strong&gt;分组（packet）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;端系统通过&lt;strong&gt;因特网服务提供商（Internet Service Provider，ISP）&lt;/strong&gt;接入因特网。每个ISP本身就是一个由多台分组交换机和多段通信链路组成的网络。&lt;/p&gt;
&lt;p&gt;端系统、分组交换机和其他因特网部件都要运行一系列&lt;strong&gt;协议（protocal）&lt;/strong&gt;。&lt;strong&gt;TCP（Transmission Control Protocal）和IP（Internet Protocal）&lt;/strong&gt;是因特网中两个最为重要。IP协议定义了在路由器和端系统之间发送和接收的分组格式。&lt;/p&gt;
&lt;p&gt;分组交换机&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路由器（rooter）&lt;/li&gt;
&lt;li&gt;链路层交换机（link-layer switch）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="计算机网络" scheme="https://xixfeng.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络(五)-链路层</title>
    <link href="https://xixfeng.github.io/2019/11/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C(%E4%BA%94)-%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
    <id>https://xixfeng.github.io/2019/11/21/计算机网络(五)-链路层/</id>
    <published>2019-11-21T06:16:56.000Z</published>
    <updated>2019-12-04T01:27:47.718Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-链路层&quot;&gt;&lt;a href=&quot;#1-链路层&quot; class=&quot;headerlink&quot; title=&quot;1. 链路层&quot;&gt;&lt;/a&gt;1. 链路层&lt;/h1&gt;&lt;h2 id=&quot;1-1-介绍&quot;&gt;&lt;a href=&quot;#1-1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 1 介绍&quot;&gt;&lt;/a&gt;1. 1 介绍&lt;/h2&gt;&lt;p&gt;链路层目标&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;错误探测、纠正&lt;/li&gt;
&lt;li&gt;共享广播频道：多重访问&lt;/li&gt;
&lt;li&gt;链路层的寻址&lt;/li&gt;
&lt;li&gt;可靠的数据传输、流量控制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;链路层在网卡（network interface card NIC）中实现&lt;/p&gt;
&lt;p&gt;节点（node）：主机、路由器&lt;/p&gt;
&lt;p&gt;链路（link）：两个节点之间的通信通道（wired link、wireless link、LANS）&lt;/p&gt;
&lt;p&gt;frame：封装datagram，添加头部&lt;u&gt;以及尾部&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;MAC：用在frame中以标示源和目的&lt;/p&gt;
&lt;p&gt;冲突域：可以互相探测到冲突的节点组成一个冲突域（在CSMA/CD处引入，trans_delay&amp;gt;=2*propagtaion_delay），即满足这个不等式的节点集合&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="计算机网络" scheme="https://xixfeng.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Java_HashMap</title>
    <link href="https://xixfeng.github.io/2019/10/27/Java_HashMap/"/>
    <id>https://xixfeng.github.io/2019/10/27/Java_HashMap/</id>
    <published>2019-10-27T02:31:37.000Z</published>
    <updated>2019-11-06T12:23:45.000Z</updated>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;Hash&quot;&gt;&lt;a href=&quot;#Hash&quot; class=&quot;headerlink&quot; title=&quot;Hash&quot;&gt;&lt;/a&gt;Hash&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;对于频繁查找的数据集，不管是使用折半查找还是顺序查找都无法使平均搜索长度变为1，这个时候hash就出现了，建立关键字与记录之间的关系，使得平均搜索长度为1。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hashing：将关键字映射到数据位置的过程，一个HashTable(散列表、哈希表)通常是使用线性结构来存储，比如数组、链表。&lt;/p&gt;
&lt;p&gt;Hash函数：必须返回(0,n-1)；必须保证均匀分布&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="https://xixfeng.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java_String</title>
    <link href="https://xixfeng.github.io/2019/10/27/Java_String%E3%80%81StringBuilder%E3%80%81StringPool/"/>
    <id>https://xixfeng.github.io/2019/10/27/Java_String、StringBuilder、StringPool/</id>
    <published>2019-10-27T02:31:37.000Z</published>
    <updated>2019-11-06T12:12:03.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;String&quot;&gt;&lt;/a&gt;String&lt;/h1&gt;&lt;h2 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h2&gt;&lt;p&gt;String 被声明为 final，因此它不可被继承。(Integer 等包装类也不能被继承）&lt;/p&gt;
&lt;p&gt;在 Java 8 中，String 内部使用 char 数组存储数据。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public final class String
    implements java.io.Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence {
    /** The value is used for character storage. */
    private final char value[];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 Java 9 之后，String 类的实现改用 byte 数组存储字符串，同时使用 &lt;code&gt;coder&lt;/code&gt; 来标识使用了哪种编码。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public final class String
    implements java.io.Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence {
    /** The value is used for character storage. */
    private final byte[] value;

    /** The identifier of the encoding used to encode the bytes in {@code value}. */
    private final byte coder;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;value 数组被声明为 final，这意味着 value 数组初始化之后就不能再引用其它数组。并且 String 内部没有改变 value 数组的方法，因此可以保证 String 不可变。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="https://xixfeng.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>bomb炸弹实验</title>
    <link href="https://xixfeng.github.io/2019/10/17/bomb%E7%82%B8%E5%BC%B9%E5%AE%9E%E9%AA%8C/"/>
    <id>https://xixfeng.github.io/2019/10/17/bomb炸弹实验/</id>
    <published>2019-10-17T02:31:37.000Z</published>
    <updated>2019-10-17T09:09:06.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;使用命令行得到可执行程序bomb的汇编代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;objdump -d bomb.exe &amp;gt; bomb.s
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>mac完成SSD6 exercise1</title>
    <link href="https://xixfeng.github.io/2019/10/12/mac%E5%AE%8C%E6%88%90SSD6%20exercise1/"/>
    <id>https://xixfeng.github.io/2019/10/12/mac完成SSD6 exercise1/</id>
    <published>2019-10-12T00:18:34.000Z</published>
    <updated>2019-10-14T12:32:26.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C程序函数调用栈&quot;&gt;&lt;a href=&quot;#C程序函数调用栈&quot; class=&quot;headerlink&quot; title=&quot;C程序函数调用栈&quot;&gt;&lt;/a&gt;C程序函数调用栈&lt;/h1&gt;&lt;p&gt;&lt;u&gt;&lt;strong&gt;函数调用相关寄存器&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Register&lt;/th&gt;
&lt;th&gt;Callee Save&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;%rax&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;结果寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rbx&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;多功能寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rcx&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;第四参数寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rdx&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;第三参数寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rsp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;指向栈顶位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rpb&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;用于标识当前栈帧的起始位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rsi&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;第二参数寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rdi&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;第一参数寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;第五参数寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;第六参数寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r10-r11&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;多功能寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r12-%r15&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;多功能寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Callee Save是指这些寄存器的值由被调用者保存和恢复，Caller Save是指由被调用者保存和恢复&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>java虚拟机方法调用-分派</title>
    <link href="https://xixfeng.github.io/2019/09/07/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8-%E5%88%86%E6%B4%BE/"/>
    <id>https://xixfeng.github.io/2019/09/07/java虚拟机方法调用-分派/</id>
    <published>2019-09-07T05:11:30.000Z</published>
    <updated>2019-09-12T11:18:34.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;分派&quot;&gt;&lt;a href=&quot;#分派&quot; class=&quot;headerlink&quot; title=&quot;分派&quot;&gt;&lt;/a&gt;分派&lt;/h1&gt;&lt;p&gt;分派调用过程将会揭示多态性特征的一些最基本的体现（如重写、重载）&lt;/p&gt;
&lt;p&gt;重写：方法覆盖是说子类重新定义了父类的方法。方法覆盖必须有相同的方法名，参数列表和返回类型&lt;/p&gt;
&lt;p&gt;重载： Java中的方法重载发生在同一个类里面两个或者是多个方法的方法名相同但是参数不同的情况。；重载需要康放入参数类型&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="虚拟机" scheme="https://xixfeng.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>编译原理(一)词法分析</title>
    <link href="https://xixfeng.github.io/2019/09/04/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86(%E4%B8%80)%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/"/>
    <id>https://xixfeng.github.io/2019/09/04/编译原理(一)词法分析/</id>
    <published>2019-09-04T00:18:40.000Z</published>
    <updated>2019-12-04T01:23:26.415Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;introduce&quot;&gt;&lt;a href=&quot;#introduce&quot; class=&quot;headerlink&quot; title=&quot;introduce&quot;&gt;&lt;/a&gt;introduce&lt;/h1&gt;&lt;p&gt;两个主要策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;intercepter 解释器  python&lt;/li&gt;
&lt;li&gt;compiler 编译器 C&lt;/li&gt;
&lt;li&gt;编译器与解释器相比做了更多的预处理&lt;/li&gt;
&lt;li&gt;二者都使用 java&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编译：将一个语言翻译成另一种语言。翻译成机器代码可以交给计算机直接执行，那汇编语言交给谁执行？CPU会将汇编语言根据指令集翻译成机器代码&lt;/p&gt;
&lt;p&gt;步骤：源代码 (source code) → 预处理器 (preprocessor) → 编译器 (compiler 编译+汇编)→ 目标代码 (object code) → 链接器 (Linker) → 可执行程序 (executables)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/gt1025814447/article/details/80442673&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gcc编译过程&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="编译原理" scheme="https://xixfeng.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>java虚拟机</title>
    <link href="https://xixfeng.github.io/2019/09/03/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <id>https://xixfeng.github.io/2019/09/03/java虚拟机/</id>
    <published>2019-09-03T12:28:49.000Z</published>
    <updated>2019-11-06T12:04:45.000Z</updated>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;java虚拟机&quot;&gt;&lt;a href=&quot;#java虚拟机&quot; class=&quot;headerlink&quot; title=&quot;java虚拟机&quot;&gt;&lt;/a&gt;java虚拟机&lt;/h1&gt;&lt;p&gt;组成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法区 （perm Gen 永久代）：类加载器加载的类信息，类名、引用信息&lt;/li&gt;
&lt;li&gt;虚拟机栈：存储java虚拟机调用的方法栈，方法栈包括局部变量表以及操作数栈&lt;/li&gt;
&lt;li&gt;本地方法栈&lt;/li&gt;
&lt;li&gt;堆：&lt;ul&gt;
&lt;li&gt;yang Gen 年轻代 （存放容易dead对象）&lt;ul&gt;
&lt;li&gt;Eden&lt;/li&gt;
&lt;li&gt;survivor（Two）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tenured Gen 老年代 （存放不容易dead的对象）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;程序计数器&lt;br&gt;其中虚拟机栈、方法栈、程序计算器随线程生灭&lt;/li&gt;
&lt;li&gt;类加载器&lt;/li&gt;
&lt;li&gt;垃圾收集器&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行引擎&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常量池：编译期被确定，*.class文件中的一部分，包含字面量（Literal）和符号引用（Symbolic Reference）。&lt;br&gt;  JDK1.6之前字符串常量池位于方法区。&lt;br&gt;  JDK1.7字符串常量池已经被移至堆。&lt;br&gt;  JDK1.8字符串常量池位移至元空间。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="虚拟机" scheme="https://xixfeng.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统</title>
    <link href="https://xixfeng.github.io/2019/09/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>https://xixfeng.github.io/2019/09/03/深入理解计算机系统/</id>
    <published>2019-09-03T01:10:30.000Z</published>
    <updated>2019-11-05T00:56:58.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;以C语言为例，介绍一种高级语言从编码到执行的所有底层细节&lt;/p&gt;
&lt;h1 id=&quot;计算机总览&quot;&gt;&lt;a href=&quot;#计算机总览&quot; class=&quot;headerlink&quot; title=&quot;计算机总览&quot;&gt;&lt;/a&gt;计算机总览&lt;/h1&gt;&lt;p&gt;C语言运行的6个阶段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edit：C使用ASCLL编码，以8位（bit）来表示字符&lt;/li&gt;
&lt;li&gt;preprocess：.i文本文件&lt;/li&gt;
&lt;li&gt;compile：.s文本文件（汇编指令）&lt;/li&gt;
&lt;li&gt;assmbler(汇编)：.o二进制代码&lt;/li&gt;
&lt;li&gt;linker：涉及到地址的重新定位&lt;/li&gt;
&lt;li&gt;loader&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>xcode调试openjdk的原理</title>
    <link href="https://xixfeng.github.io/2019/09/01/xcode%E8%B0%83%E8%AF%95openjdk%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>https://xixfeng.github.io/2019/09/01/xcode调试openjdk的原理/</id>
    <published>2019-09-01T02:37:13.000Z</published>
    <updated>2019-10-14T11:53:30.000Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在编译openjdk后，使用xcode调试hotspot。但是此时引入的是openjdk中hotspot源码，在源码上打断点为什么影响编译的java程序&lt;/p&gt;
&lt;p&gt;首先调试分为软件断点和硬件断点，软件断点主要是通过x86架构中自带的INT
        
      
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>mac编译openjdk9</title>
    <link href="https://xixfeng.github.io/2019/08/30/mac%E7%BC%96%E8%AF%91openjdk9/"/>
    <id>https://xixfeng.github.io/2019/08/30/mac编译openjdk9/</id>
    <published>2019-08-30T11:28:35.000Z</published>
    <updated>2019-08-31T07:28:53.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;homebrew&lt;/li&gt;
&lt;li&gt;freetype&lt;/li&gt;
&lt;li&gt;Mercurial&lt;/li&gt;
&lt;li&gt;xcode-select&lt;/li&gt;
&lt;li&gt;源码&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;bash ./configure \
    --with-target-bits=64 \
--with-debug-level=slowdebug \
--with-freetype-include=/usr/local/include/freetype2 \
--with-freetype-lib=/usr/local/Cellar/freetype/2.10.0/lib \
--disable-warnings-as-errors 
//注意把freetype版本换为本机安装的

make all
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;Q1 &lt;/p&gt;
&lt;p&gt;#include&lt;new&gt; 头文件缺失&lt;br&gt;这是由于xcode9升级到xcode10过后删除了一些文件导致的，只需要把xcode9中/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++和/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib/libstdc++.*复制到xcode10相同的目录即可&lt;br&gt;&lt;a href=&quot;https://pan.baidu.com/s/1W2sGlNs4zHHXriSRJkxhkA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1W2sGlNs4zHHXriSRJkxhkA&lt;/a&gt;&lt;/new&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>修改hexo主题</title>
    <link href="https://xixfeng.github.io/2019/07/17/%E4%BF%AE%E6%94%B9hexo%E4%B8%BB%E9%A2%98/"/>
    <id>https://xixfeng.github.io/2019/07/17/修改hexo主题/</id>
    <published>2019-07-17T05:49:14.000Z</published>
    <updated>2019-08-17T09:17:03.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;模版&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;index&lt;/td&gt;
&lt;td&gt;主页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;post&lt;/td&gt;
&lt;td&gt;在source/post中的文章&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;page&lt;/td&gt;
&lt;td&gt;在source中除post的所有文章&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;archive&lt;/td&gt;
&lt;td&gt;归档(主页中所有文章的集合预览)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;category&lt;/td&gt;
&lt;td&gt;分类归档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tag&lt;/td&gt;
&lt;td&gt;标签分类&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;每个模板都默认使用 &lt;code&gt;layout&lt;/code&gt; 布局，您可在 front-matter 指定其他布局，或是设为 &lt;code&gt;false&lt;/code&gt; 来关闭布局功能，您甚至可在布局中再使用其他布局来建立嵌套布局。
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>前端基础</title>
    <link href="https://xixfeng.github.io/2019/07/15/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    <id>https://xixfeng.github.io/2019/07/15/前端基础/</id>
    <published>2019-07-15T02:48:05.000Z</published>
    <updated>2019-11-20T05:45:18.353Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h1&gt;&lt;p&gt;块级元素、内联元素&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;块级元素会自动跳行，内联元素不会；&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;div&amp;gt; 属于块级元素 用作元素的容器，常用来网页布局
&amp;lt;span&amp;gt; 属于内联元素 用作文本的容器
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;块级标签&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;标签&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;意义&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;标签&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;center&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;居中对齐块&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;dir&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;目录列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;div&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;常用块级元素&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;dl&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;定义列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;form&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;交互表单&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;h1-h6&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;hr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;水平分割线&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;menu&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;菜单列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ol&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;排序表单&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;p&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;段落&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;address&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;地址&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;blockquote&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;块应用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="基础" scheme="https://xixfeng.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>软件工程</title>
    <link href="https://xixfeng.github.io/2019/06/15/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    <id>https://xixfeng.github.io/2019/06/15/软件工程/</id>
    <published>2019-06-15T12:01:55.000Z</published>
    <updated>2019-10-21T00:32:42.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;软件&quot;&gt;&lt;a href=&quot;#软件&quot; class=&quot;headerlink&quot; title=&quot;软件&quot;&gt;&lt;/a&gt;软件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;软件：1.指令的集合，通过执行这些指令可以完成预期的功能；2.数据结构，帮助程序有效利用数据；3.软件描述信息，描述软件的信息和操作&lt;/li&gt;
&lt;li&gt;软件的特点：功能性、可靠性、可用性、可维护性、可移植性、效率&lt;/li&gt;
&lt;li&gt;软件于硬件的不同：软件不会”磨损”&lt;/li&gt;
&lt;li&gt;软件的改变特性：预期情况，实际情况&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;软件工程&quot;&gt;&lt;a href=&quot;#软件工程&quot; class=&quot;headerlink&quot; title=&quot;软件工程&quot;&gt;&lt;/a&gt;软件工程&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;软件工程：在软件的开发、运行和维护中采用系统的、有纪律的、可量化的方法，即将工程应用于软件。&lt;/li&gt;
&lt;li&gt;软件神话(myths)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;过程模型&quot;&gt;&lt;a href=&quot;#过程模型&quot; class=&quot;headerlink&quot; title=&quot;过程模型&quot;&gt;&lt;/a&gt;过程模型&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;软件过程：软件过程为一个为建造高质量软件所需完成的任务的框架&lt;/li&gt;
&lt;li&gt;过程模型：过程模型就是一种开发策略，这种策略针对软件工程的各个阶段提供了一套范形，使工程的进展达到预期的目的&lt;/li&gt;
&lt;li&gt;过程框架：沟通、策划、建模(需求分析和设计)、构建(实际代码和测试)、部署&lt;/li&gt;
&lt;li&gt;过程模型分类：步骤模式、任务模式、阶段模式
    
    </summary>
    
      <category term="基础" scheme="https://xixfeng.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
</feed>
