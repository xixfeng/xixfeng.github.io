<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xixfeng</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xixfeng.github.io/"/>
  <updated>2019-10-31T12:02:33.378Z</updated>
  <id>https://xixfeng.github.io/</id>
  
  <author>
    <name>Li Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java_内置数据结构</title>
    <link href="https://xixfeng.github.io/2019/10/27/java_%E5%86%85%E7%BD%AE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://xixfeng.github.io/2019/10/27/java_内置数据结构/</id>
    <published>2019-10-27T02:31:37.000Z</published>
    <updated>2019-10-31T12:02:33.378Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hash&quot;&gt;&lt;a href=&quot;#Hash&quot; class=&quot;headerlink&quot; title=&quot;Hash&quot;&gt;&lt;/a&gt;Hash&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;对于频繁查找的数据集，不管是使用折半查找还是顺序查找都无法使平均搜索长度变为1，这个时候hash就出现了，建立关键字与记录之间的关系，使得平均搜索长度为1。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hashing：将关键字映射到数据位置的过程，一个HashTable(散列表、哈希表)通常是使用线性结构来存储，比如数组、链表。&lt;/p&gt;
&lt;p&gt;Hash函数：必须返回(0,n-1)；必须保证均匀分布&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>bomb炸弹实验</title>
    <link href="https://xixfeng.github.io/2019/10/17/bomb%E7%82%B8%E5%BC%B9%E5%AE%9E%E9%AA%8C/"/>
    <id>https://xixfeng.github.io/2019/10/17/bomb炸弹实验/</id>
    <published>2019-10-17T02:31:37.000Z</published>
    <updated>2019-10-17T09:09:06.663Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;使用命令行得到可执行程序bomb的汇编代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;objdump -d bomb.exe &amp;gt; bomb.s
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>mac完成SSD6 exercise1</title>
    <link href="https://xixfeng.github.io/2019/10/12/mac%E5%AE%8C%E6%88%90SSD6%20exercise1/"/>
    <id>https://xixfeng.github.io/2019/10/12/mac完成SSD6 exercise1/</id>
    <published>2019-10-12T00:18:34.000Z</published>
    <updated>2019-10-14T12:32:26.271Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C程序函数调用栈&quot;&gt;&lt;a href=&quot;#C程序函数调用栈&quot; class=&quot;headerlink&quot; title=&quot;C程序函数调用栈&quot;&gt;&lt;/a&gt;C程序函数调用栈&lt;/h1&gt;&lt;p&gt;&lt;u&gt;&lt;strong&gt;函数调用相关寄存器&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Register&lt;/th&gt;
&lt;th&gt;Callee Save&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;%rax&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;结果寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rbx&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;多功能寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rcx&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;第四参数寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rdx&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;第三参数寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rsp&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;指向栈顶位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rpb&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;用于标识当前栈帧的起始位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rsi&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;第二参数寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%rdi&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;第一参数寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;第五参数寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;第六参数寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r10-r11&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;多功能寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%r12-%r15&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;多功能寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Callee Save是指这些寄存器的值由被调用者保存和恢复，Caller Save是指由被调用者保存和恢复&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>java虚拟机方法调用-分派</title>
    <link href="https://xixfeng.github.io/2019/09/07/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8-%E5%88%86%E6%B4%BE/"/>
    <id>https://xixfeng.github.io/2019/09/07/java虚拟机方法调用-分派/</id>
    <published>2019-09-07T05:11:30.000Z</published>
    <updated>2019-09-12T11:18:34.324Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;分派&quot;&gt;&lt;a href=&quot;#分派&quot; class=&quot;headerlink&quot; title=&quot;分派&quot;&gt;&lt;/a&gt;分派&lt;/h1&gt;&lt;p&gt;分派调用过程将会揭示多态性特征的一些最基本的体现（如重写、重载）&lt;/p&gt;
&lt;p&gt;重写：方法覆盖是说子类重新定义了父类的方法。方法覆盖必须有相同的方法名，参数列表和返回类型&lt;/p&gt;
&lt;p&gt;重载： Java中的方法重载发生在同一个类里面两个或者是多个方法的方法名相同但是参数不同的情况。；重载需要康放入参数类型&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="虚拟机" scheme="https://xixfeng.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="https://xixfeng.github.io/2019/09/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>https://xixfeng.github.io/2019/09/04/计算机网络/</id>
    <published>2019-09-04T05:47:06.000Z</published>
    <updated>2019-10-30T08:43:48.676Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://wps.pearsoned.com/ecs_kurose_compnetw_6/216/55463/14198700.cw/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自顶向下教程配套的web动画&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Intenet&quot;&gt;&lt;a href=&quot;#Intenet&quot; class=&quot;headerlink&quot; title=&quot;Intenet&quot;&gt;&lt;/a&gt;Intenet&lt;/h2&gt;&lt;p&gt;端系统通过&lt;strong&gt;通信链路（communication link）&lt;/strong&gt;和&lt;strong&gt;分组交换机（packet switch）&lt;/strong&gt;连接到一起。发送端系统将数据分段，并加上头部字节，由此形成的信息包叫做&lt;strong&gt;分组（packet）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;端系统通过&lt;strong&gt;因特网服务提供商（Internet Service Provider，ISP）&lt;/strong&gt;接入因特网。每个ISP本身就是一个由多台分组交换机和多段通信链路组成的网络。&lt;/p&gt;
&lt;p&gt;端系统、分组交换机和其他因特网部件都要运行一系列&lt;strong&gt;协议（protocal）&lt;/strong&gt;。&lt;strong&gt;TCP（Transmission Control Protocal）和IP（Internet Protocal）&lt;/strong&gt;是因特网中两个最为重要。IP协议定义了在路由器和端系统之间发送和接收的分组格式。&lt;/p&gt;
&lt;p&gt;分组交换机&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路由器（rooter）：通常用于网络核心中？&lt;/li&gt;
&lt;li&gt;链路层交换机（link-layer switch）：通常用于接入网中？&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="计算机网络" scheme="https://xixfeng.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>编译原理</title>
    <link href="https://xixfeng.github.io/2019/09/04/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    <id>https://xixfeng.github.io/2019/09/04/编译原理/</id>
    <published>2019-09-04T00:18:40.000Z</published>
    <updated>2019-10-30T11:21:34.456Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;introduce&quot;&gt;&lt;a href=&quot;#introduce&quot; class=&quot;headerlink&quot; title=&quot;introduce&quot;&gt;&lt;/a&gt;introduce&lt;/h1&gt;&lt;p&gt;两个主要策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;intercepter 解释器  python&lt;/li&gt;
&lt;li&gt;compiler 编译器 C&lt;/li&gt;
&lt;li&gt;编译器与解释器相比做了更多的预处理&lt;/li&gt;
&lt;li&gt;二者都使用 java&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编译：将一个语言翻译成另一种语言。翻译成机器代码可以交给计算机直接执行，那汇编语言交给谁执行？CPU会将汇编语言根据指令集翻译成机器代码&lt;/p&gt;
&lt;p&gt;步骤：源代码 (source code) → 预处理器 (preprocessor) → 编译器 (compiler) → 目标代码 (object code) → 链接器 (Linker) → 可执行程序 (executables)&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="编译器" scheme="https://xixfeng.github.io/tags/%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>java虚拟机</title>
    <link href="https://xixfeng.github.io/2019/09/03/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <id>https://xixfeng.github.io/2019/09/03/java虚拟机/</id>
    <published>2019-09-03T12:28:49.000Z</published>
    <updated>2019-11-01T00:46:23.687Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;description&quot;&gt;&lt;a href=&quot;#description&quot; class=&quot;headerlink&quot; title=&quot;description:&quot;&gt;&lt;/a&gt;description:&lt;/h2&gt;&lt;h1 id=&quot;java虚拟机&quot;&gt;&lt;a href=&quot;#java虚拟机&quot; class=&quot;headerlink&quot; title=&quot;java虚拟机&quot;&gt;&lt;/a&gt;java虚拟机&lt;/h1&gt;&lt;p&gt;组成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法区 （perm Gen 永久代）：类加载器加载的类信息，类名、引用信息&lt;/li&gt;
&lt;li&gt;虚拟机栈：存储java虚拟机调用的方法栈，方法栈包括局部变量表以及操作数栈&lt;/li&gt;
&lt;li&gt;方法栈&lt;/li&gt;
&lt;li&gt;堆：&lt;ul&gt;
&lt;li&gt;yang Gen 年轻代 （存放容易dead对象）&lt;ul&gt;
&lt;li&gt;Eden&lt;/li&gt;
&lt;li&gt;survivor（Two）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tenured Gen 老年代 （存放不容易dead的对象）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;程序计数器&lt;br&gt;其中虚拟机栈、方法栈、程序计算器随线程生灭&lt;/li&gt;
&lt;li&gt;类加载器&lt;/li&gt;
&lt;li&gt;垃圾收集器&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行引擎&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常量池：编译期被确定，*.class文件中的一部分，包含字面量（Literal）和符号引用（Symbolic Reference）。&lt;br&gt;  JDK1.6之前字符串常量池位于方法区。&lt;br&gt;  JDK1.7字符串常量池已经被移至堆。&lt;br&gt;  JDK1.8字符串常量池位移至元空间。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="虚拟机" scheme="https://xixfeng.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>深入理解计算机系统</title>
    <link href="https://xixfeng.github.io/2019/09/03/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>https://xixfeng.github.io/2019/09/03/深入理解计算机系统/</id>
    <published>2019-09-03T01:10:30.000Z</published>
    <updated>2019-10-29T01:31:39.456Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;以C语言为例，介绍一种高级语言从编码到执行的所有底层细节&lt;/p&gt;
&lt;h1 id=&quot;计算机总览&quot;&gt;&lt;a href=&quot;#计算机总览&quot; class=&quot;headerlink&quot; title=&quot;计算机总览&quot;&gt;&lt;/a&gt;计算机总览&lt;/h1&gt;&lt;p&gt;C语言运行的6个阶段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edit：C使用ASCLL编码，以8位（bit）来表示字符&lt;/li&gt;
&lt;li&gt;preprocess：.i文本文件&lt;/li&gt;
&lt;li&gt;compile：.s文本文件（汇编指令）&lt;/li&gt;
&lt;li&gt;assmbler(汇编)：.o二进制代码&lt;/li&gt;
&lt;li&gt;linker：涉及到地址的重新定位&lt;/li&gt;
&lt;li&gt;loader&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>xcode调试openjdk的原理</title>
    <link href="https://xixfeng.github.io/2019/09/01/xcode%E8%B0%83%E8%AF%95openjdk%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>https://xixfeng.github.io/2019/09/01/xcode调试openjdk的原理/</id>
    <published>2019-09-01T02:37:13.000Z</published>
    <updated>2019-10-14T11:53:30.464Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在编译openjdk后，使用xcode调试hotspot。但是此时引入的是openjdk中hotspot源码，在源码上打断点为什么影响编译的java程序&lt;/p&gt;
&lt;p&gt;首先调试分为软件断点和硬件断点，软件断点主要是通过x86架构中自带的INT
        
      
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>mac编译openjdk9</title>
    <link href="https://xixfeng.github.io/2019/08/30/mac%E7%BC%96%E8%AF%91openjdk9/"/>
    <id>https://xixfeng.github.io/2019/08/30/mac编译openjdk9/</id>
    <published>2019-08-30T11:28:35.000Z</published>
    <updated>2019-08-31T07:28:53.445Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;homebrew&lt;/li&gt;
&lt;li&gt;freetype&lt;/li&gt;
&lt;li&gt;Mercurial&lt;/li&gt;
&lt;li&gt;xcode-select&lt;/li&gt;
&lt;li&gt;源码&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;bash ./configure \
    --with-target-bits=64 \
--with-debug-level=slowdebug \
--with-freetype-include=/usr/local/include/freetype2 \
--with-freetype-lib=/usr/local/Cellar/freetype/2.10.0/lib \
--disable-warnings-as-errors 
//注意把freetype版本换为本机安装的

make all
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;Q1 &lt;/p&gt;
&lt;p&gt;#include&lt;new&gt; 头文件缺失&lt;br&gt;这是由于xcode9升级到xcode10过后删除了一些文件导致的，只需要把xcode9中/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++和/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib/libstdc++.*复制到xcode10相同的目录即可&lt;br&gt;&lt;a href=&quot;https://pan.baidu.com/s/1W2sGlNs4zHHXriSRJkxhkA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1W2sGlNs4zHHXriSRJkxhkA&lt;/a&gt;&lt;/new&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>redis学习总结一，数据结构、对象</title>
    <link href="https://xixfeng.github.io/2019/08/16/redis%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E4%B8%80%EF%BC%8C%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://xixfeng.github.io/2019/08/16/redis学习总结一，简单动态字符串/</id>
    <published>2019-08-16T10:13:21.000Z</published>
    <updated>2019-10-31T12:54:06.470Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、动态字符串&quot;&gt;&lt;a href=&quot;#一、动态字符串&quot; class=&quot;headerlink&quot; title=&quot;一、动态字符串&quot;&gt;&lt;/a&gt;一、动态字符串&lt;/h1&gt;&lt;p&gt;redis中使用简单动态字符串(SDS)来表达字符串&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;C&quot;&gt;struct sdshdr {

    // buf 中已占用空间的长度，不会计算末尾的\0
    int len;

    // buf 中剩余可用空间的长度
    int free;

    // 数据空间
    char buf[];
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;SDS与C字符串区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常数复杂度获得字符串长度&lt;/li&gt;
&lt;li&gt;C字符串存在字符串溢出的可能(strcat函数)&lt;/li&gt;
&lt;li&gt;减少修改字符时，内存重新分配花的时间(空间换时间)&lt;/li&gt;
&lt;li&gt;SDS预分配：对SDS修改之后，会额外分配空间(sdscat函数)&lt;/li&gt;
&lt;li&gt;惰性空间释放：当缩短SDS字符串时，不会立马释放其多余空间（那不是会造成大量当浪费空间）&lt;/li&gt;
&lt;li&gt;二进制安全，不用/0作为结尾字符，所以可以存储二进制文件
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="redis" scheme="https://xixfeng.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>修改hexo主题</title>
    <link href="https://xixfeng.github.io/2019/07/17/%E4%BF%AE%E6%94%B9hexo%E4%B8%BB%E9%A2%98/"/>
    <id>https://xixfeng.github.io/2019/07/17/修改hexo主题/</id>
    <published>2019-07-17T05:49:14.000Z</published>
    <updated>2019-08-17T09:17:03.159Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;模版&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;index&lt;/td&gt;
&lt;td&gt;主页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;post&lt;/td&gt;
&lt;td&gt;在source/post中的文章&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;page&lt;/td&gt;
&lt;td&gt;在source中除post的所有文章&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;archive&lt;/td&gt;
&lt;td&gt;归档(主页中所有文章的集合预览)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;category&lt;/td&gt;
&lt;td&gt;分类归档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tag&lt;/td&gt;
&lt;td&gt;标签分类&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;每个模板都默认使用 &lt;code&gt;layout&lt;/code&gt; 布局，您可在 front-matter 指定其他布局，或是设为 &lt;code&gt;false&lt;/code&gt; 来关闭布局功能，您甚至可在布局中再使用其他布局来建立嵌套布局。
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>前端基础</title>
    <link href="https://xixfeng.github.io/2019/07/15/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    <id>https://xixfeng.github.io/2019/07/15/前端基础/</id>
    <published>2019-07-15T02:48:05.000Z</published>
    <updated>2019-08-14T14:16:21.910Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h1&gt;&lt;p&gt;块级元素、内联元素&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;块级元素会自动跳行，内联元素不会；&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;div&amp;gt; 属于块级元素 用作元素的容器，常用来网页布局
&amp;lt;span&amp;gt; 属于内联元素 用作文本的容器
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;块级标签&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;标签&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;意义&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;标签&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;center&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;居中对齐块&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;dir&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;目录列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;div&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;常用块级元素&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;dl&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;定义列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;form&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;交互表单&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;h1-h6&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;hr&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;水平分割线&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;menu&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;菜单列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ol&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;排序表单&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;p&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;段落&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;address&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;地址&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;blockquote&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;块应用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="基础" scheme="https://xixfeng.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>软件工程</title>
    <link href="https://xixfeng.github.io/2019/06/15/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    <id>https://xixfeng.github.io/2019/06/15/软件工程/</id>
    <published>2019-06-15T12:01:55.000Z</published>
    <updated>2019-10-21T00:32:42.967Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;软件&quot;&gt;&lt;a href=&quot;#软件&quot; class=&quot;headerlink&quot; title=&quot;软件&quot;&gt;&lt;/a&gt;软件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;软件：1.指令的集合，通过执行这些指令可以完成预期的功能；2.数据结构，帮助程序有效利用数据；3.软件描述信息，描述软件的信息和操作&lt;/li&gt;
&lt;li&gt;软件的特点：功能性、可靠性、可用性、可维护性、可移植性、效率&lt;/li&gt;
&lt;li&gt;软件于硬件的不同：软件不会”磨损”&lt;/li&gt;
&lt;li&gt;软件的改变特性：预期情况，实际情况&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;软件工程&quot;&gt;&lt;a href=&quot;#软件工程&quot; class=&quot;headerlink&quot; title=&quot;软件工程&quot;&gt;&lt;/a&gt;软件工程&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;软件工程：在软件的开发、运行和维护中采用系统的、有纪律的、可量化的方法，即将工程应用于软件。&lt;/li&gt;
&lt;li&gt;软件神话(myths)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;过程模型&quot;&gt;&lt;a href=&quot;#过程模型&quot; class=&quot;headerlink&quot; title=&quot;过程模型&quot;&gt;&lt;/a&gt;过程模型&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;软件过程：软件过程为一个为建造高质量软件所需完成的任务的框架&lt;/li&gt;
&lt;li&gt;过程模型：过程模型就是一种开发策略，这种策略针对软件工程的各个阶段提供了一套范形，使工程的进展达到预期的目的&lt;/li&gt;
&lt;li&gt;过程框架：沟通、策划、建模(需求分析和设计)、构建(实际代码和测试)、部署&lt;/li&gt;
&lt;li&gt;过程模型分类：步骤模式、任务模式、阶段模式
    
    </summary>
    
      <category term="基础" scheme="https://xixfeng.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>操作系统</title>
    <link href="https://xixfeng.github.io/2019/06/13/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>https://xixfeng.github.io/2019/06/13/操作系统/</id>
    <published>2019-06-13T07:33:33.000Z</published>
    <updated>2019-08-15T05:10:36.904Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;计算机组成&quot;&gt;&lt;a href=&quot;#计算机组成&quot; class=&quot;headerlink&quot; title=&quot;计算机组成&quot;&gt;&lt;/a&gt;计算机组成&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;处理器(CPU)：控制计算机的操作，执行数据处理功能&lt;/li&gt;
&lt;li&gt;内存(memory)：存储数据和程序&lt;/li&gt;
&lt;li&gt;输入/输出模块(I/O modules)：在计算机与外部环境之间移动数据&lt;/li&gt;
&lt;li&gt;系统总线：在处理器、内存和输入/输出模块间提供通信的设施&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;操作系统概述&quot;&gt;&lt;a href=&quot;#操作系统概述&quot; class=&quot;headerlink&quot; title=&quot;操作系统概述&quot;&gt;&lt;/a&gt;操作系统概述&lt;/h1&gt;&lt;p&gt;操作系统:控制应用程序执行的程序，是应用程序与计算机硬件之间的接口，负责管理计算机硬件和软件资源&lt;br&gt;目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方便&lt;/li&gt;
&lt;li&gt;有效&lt;/li&gt;
&lt;li&gt;扩展能力&lt;br&gt;主要成就:&lt;/li&gt;
&lt;li&gt;进程&lt;/li&gt;
&lt;li&gt;调度和资源管理&lt;/li&gt;
&lt;li&gt;内存管理&lt;/li&gt;
&lt;li&gt;信息保护和安全&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="基础" scheme="https://xixfeng.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="操作系统" scheme="https://xixfeng.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据库</title>
    <link href="https://xixfeng.github.io/2019/06/01/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://xixfeng.github.io/2019/06/01/数据库/</id>
    <published>2019-06-01T15:42:08.000Z</published>
    <updated>2019-09-21T03:52:08.733Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据库&quot;&gt;&lt;a href=&quot;#数据库&quot; class=&quot;headerlink&quot; title=&quot;数据库&quot;&gt;&lt;/a&gt;数据库&lt;/h1&gt;&lt;p&gt;三大范式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一范式（1NF）：字段（列）不可再分&lt;/li&gt;
&lt;li&gt;第二范式（2NF）：满足1NF,非主属性完全依赖于候选键&lt;/li&gt;
&lt;li&gt;第三范式（3NF）：满足2NF,非主属性对候选键没有传递依赖&lt;/li&gt;
&lt;li&gt;BCNF：满足3NF，且所有函数依赖对左边都有候选键&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;五大约束&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;primary KEY：设置主键&lt;/li&gt;
&lt;li&gt;NOT NULL：不为NULL&lt;/li&gt;
&lt;li&gt;FOREIGN key：设置外键约束&lt;/li&gt;
&lt;li&gt;unique：设计唯一性约束&lt;/li&gt;
&lt;li&gt;default：默认
    
    </summary>
    
      <category term="基础" scheme="https://xixfeng.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="数据库" scheme="https://xixfeng.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>机器学习</title>
    <link href="https://xixfeng.github.io/2018/12/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>https://xixfeng.github.io/2018/12/02/机器学习/</id>
    <published>2018-12-02T07:49:28.000Z</published>
    <updated>2019-08-15T05:11:07.640Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;机器学习定义&quot;&gt;&lt;a href=&quot;#机器学习定义&quot; class=&quot;headerlink&quot; title=&quot;机器学习定义&quot;&gt;&lt;/a&gt;机器学习定义&lt;/h1&gt;&lt;p&gt;definete：A computer program is said to learn from experience E with respect to some task T and some performance measureP, if its performance onT, as measured by P, improves with experienceE&lt;/p&gt;
&lt;p&gt;例如在象棋机器学习中，E就是下象棋的过程，T就是获得胜利，P就是下一次与人下棋时，胜利的概率&lt;/p&gt;
&lt;p&gt;邮件分类中，E就是我们把某一个邮件归结为辣鸡，T就是把邮件分类，P就是下一次遇到新邮件时，成功归类的概率&lt;/p&gt;
    
    </summary>
    
      <category term="基础" scheme="https://xixfeng.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>数据挖掘</title>
    <link href="https://xixfeng.github.io/2018/11/28/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    <id>https://xixfeng.github.io/2018/11/28/数据挖掘/</id>
    <published>2018-11-28T04:00:38.000Z</published>
    <updated>2019-09-05T11:30:54.086Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据挖掘-机器学习-大数据之间的关系&quot;&gt;&lt;a href=&quot;#数据挖掘-机器学习-大数据之间的关系&quot; class=&quot;headerlink&quot; title=&quot;数据挖掘 机器学习 大数据之间的关系&quot;&gt;&lt;/a&gt;数据挖掘 机器学习 大数据之间的关系&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;大数据&lt;/strong&gt;是媒体炒热的一个概念：总的来说就是数据量大，结构复杂，数据更新快&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;机器学习&lt;/strong&gt;方法在&lt;strong&gt;大型数据库中的应用&lt;/strong&gt;称为数据挖掘(Data Mining)&lt;/p&gt;
&lt;h1 id=&quot;数据挖掘&quot;&gt;&lt;a href=&quot;#数据挖掘&quot; class=&quot;headerlink&quot; title=&quot;数据挖掘&quot;&gt;&lt;/a&gt;数据挖掘&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Data_mining&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;数据挖掘&lt;/a&gt;：从大量的数据中获取知识，模式&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="https://xixfeng.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="数据挖掘" scheme="https://xixfeng.github.io/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>测试</title>
    <link href="https://xixfeng.github.io/2018/11/20/%E6%B5%8B%E8%AF%95/"/>
    <id>https://xixfeng.github.io/2018/11/20/测试/</id>
    <published>2018-11-20T02:37:47.000Z</published>
    <updated>2019-08-15T05:11:00.927Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/62f16cd4fef3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;转自&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TDD 有三层含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test-Driven Development，测试&lt;strong&gt;驱动&lt;/strong&gt;开发。&lt;/li&gt;
&lt;li&gt;Task-Driven Development，任务&lt;strong&gt;驱动&lt;/strong&gt;开发，要对问题进行分析并进行任务分解。&lt;/li&gt;
&lt;li&gt;Test-Driven Design，测试保护下的设计改善。TDD 并不能直接提高设计能力，它只是给你更多机会和保障去改善设计。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="基础" scheme="https://xixfeng.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="测试" scheme="https://xixfeng.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>github后端架构师技术图谱</title>
    <link href="https://xixfeng.github.io/2018/11/17/github%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/"/>
    <id>https://xixfeng.github.io/2018/11/17/github后端架构师技术图谱/</id>
    <published>2018-11-17T04:06:28.000Z</published>
    <updated>2019-08-15T05:12:23.142Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;压力测试&quot;&gt;&lt;a href=&quot;#压力测试&quot; class=&quot;headerlink&quot; title=&quot;压力测试&quot;&gt;&lt;/a&gt;压力测试&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/blueheart20/article/details/52170790&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;apache ab&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;并发&quot;&gt;&lt;a href=&quot;#并发&quot; class=&quot;headerlink&quot; title=&quot;并发&quot;&gt;&lt;/a&gt;并发&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/CL0610/Java-concurrency&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;并发知识合集&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;p&gt;1.同步、异步：同步方法调用一开始，调用者必须等待被调用的方法结束后，调用者后面的代码才能执行。而异步调用，指的是，调用者不用管被调用方法是否完成，都会继续执行后面的代码。&lt;/p&gt;
&lt;p&gt;2.并发并行：并发和并行是十分容易混淆的概念。并发指的是多个任务交替进行，而并行则是指真正意义上的“同时进行”。实际上，如果系统内只有一个CPU，而使用多线程时，那么真实系统环境下不能并行，只能通过切换时间片的方式交替进行，而成为并发执行任务。真正的并行也只能出现在拥有多个CPU的系统中。&lt;/p&gt;
&lt;p&gt;3.阻塞和非阻塞：阻塞和非阻塞通常用来形容多线程间的相互影响，比如一个线程占有了临界区资源，那么其他线程需要这个资源就必须进行等待该资源的释放，会导致等待的线程挂起，这种情况就是阻塞，而非阻塞就恰好相反，它强调没有一个线程可以阻塞其他线程，所有的线程都会尝试地往前运行。&lt;strong&gt;线程能否阻塞其他线程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4.临界区&lt;/p&gt;
&lt;p&gt;临界区用来表示一种公共资源或者说是共享数据，可以被多个线程使用。但是每个线程使用时，一旦临界区资源被一个线程占有，那么其他线程必须等待&lt;br&gt;
    
    </summary>
    
      <category term="资源" scheme="https://xixfeng.github.io/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="后端" scheme="https://xixfeng.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
</feed>
